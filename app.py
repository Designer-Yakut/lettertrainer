# app.py (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ dots_only)
# app.py (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏)
#‚öôÔ∏èapp.py —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º JavaScript –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã –±—É–∫–≤;
#üßæ–∏ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –ø–æ–¥ —à–∞–≥–æ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–ø–æ –ì–û–°–¢).

# ================================================================
#  app.py ‚Äî Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –ø–æ –ì–û–°–¢
# ================================================================
#  –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ:
#   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏ PNG —Å –ì–û–°–¢-—Å–µ—Ç–∫–æ–π –∏ —à—Ä–∏—Ñ—Ç–æ–º
#   ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞ (font_size / 14)
#   ‚úÖ –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏–∑ –ø–∞–ø–∫–∏ fonts/
#   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ .txt –∏–ª–∏ textarea
#   ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ì–û–°–¢/–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞
#   ‚úÖ –ü–æ–∫–∞–∑ —Å–µ—Ç–∫–∏, –±—É–∫–≤, —Ç–æ—á–µ–∫ ‚Äî –≤ –ª—é–±—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö
# ================================================================
#  –î–æ–±–∞–≤–ª–µ–Ω–æ:
#   ‚úÖ –û–ø—Ü–∏—è "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞"
#   ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—â–∏–Ω—ã –ø—Ä–∏ —Å–Ω—è—Ç–æ–π –≥–∞–ª–æ—á–∫–µ
#   ‚úÖ –ê–≤—Ç–æ–ø–µ—Ä–µ—Å—á—ë—Ç —à–∞–≥–æ–≤ —Å–µ—Ç–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ font_size
#   ‚úÖ –ß–µ–∫–±–æ–∫—Å "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä—É—é –ø–∞–ª–∏—Ç—Ä—É" (0.6 / 0.4 / 0.6)
# ================================================================

from flask import Flask, render_template_string, request, send_file
import io
import os
from Font_on_TEMP5_to_GOST import TextRenderer, render_training_letter_images
import getpass
from datetime import datetime

# ------------------------------------------------
#  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ------------------------------------------------
app = Flask(__name__)

# ------------------------------------------------
#  –ù–ê–°–¢–†–û–ô–ö–ò
# ------------------------------------------------
# –ü–∞–ø–∫–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏ (–∏—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
BASE_DIR = os.path.dirname(__file__)
FONTS_DIR = os.path.join(BASE_DIR, "fonts")

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∏
# –ù–∞–∑–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏

FONT_LABELS = {
    "gost.ttf": "–ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç",
    "gost_0.ttf": "–ì–û–°–¢ 0",
    "gost_au.ttf": "–ì–û–°–¢ AU",
    "gost_bu.ttf": "–ì–û–°–¢ BU",
    "gost_type_a.ttf": "–ì–û–°–¢ —Ç–∏–ø A",
    "gost_type_a_italic.ttf": "–ì–û–°–¢ —Ç–∏–ø A (–Ω–∞–∫–ª–æ–Ω–Ω—ã–π)",
    "gost_type_b.ttf": "–ì–û–°–¢ —Ç–∏–ø B",
    "gost_type_b_italic.ttf": "–ì–û–°–¢ —Ç–∏–ø B (–Ω–∞–∫–ª–æ–Ω–Ω—ã–π)"
}

# –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ fonts/
AVAILABLE_FONTS = sorted([
    f for f in os.listdir(FONTS_DIR)
    if f.lower().endswith((".ttf", ".otf"))
]) if os.path.isdir(FONTS_DIR) else []

# ------------------------------------------------
#  HTML-–§–û–†–ú–ê
# ------------------------------------------------

# –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ HTML —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º JavaScript –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π
HTML_FORM = """
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>–ì–û–°–¢ —Ç–∏—Ç—É–ª</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 30px;
      background-color: #f9f9f9;
    }
    form {
      background: #fff;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 8px;
      max-width: 800px;
    }
    label {
      font-weight: bold;
    }
    input[type="text"], input[type="number"], input[type="file"], textarea, select {
      width: 100%;
      padding: 6px;
      margin-top: 5px;
      margin-bottom: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-sizing: border-box;
    }
    input[type="submit"] {
      padding: 10px 18px;
      background-color: #4682B4;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-top: 10px;
    }
    input[type="submit"]:hover {
      background-color: #4169E1;
    }
    a {
      display: inline-block;
      margin-right: 15px;
      margin-top: 10px;
      color: #4B0082;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <h2 style="color: #FF9800;">–¢–µ—Å—Ç-—Ç—Ä–µ–Ω–∞–∂–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞</h2>
  <form method="post" enctype="multipart/form-data">

    <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏ (–º–º):</label>
    <input type="number" name="spacing" value="4.2" step="0.1">

    <label>–í—ã—Å–æ—Ç–∞ –ø—Ä–æ–ø–∏—Å–Ω—ã—Ö –±—É–∫–≤ (–º–º):</label>
    <input type="number" name="font_size" id="font_size" value="10" step="0.1">

    <input type="checkbox" id="auto_line_width" name="auto_line_width" checked>
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞

    <label>–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞ (–º–º):</label>
    <input type="number" id="line_width" name="line_width" value="0.7" step="0.1">

    <label>–®–∞–≥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–º–º):</label>
    <input type="number" id="thin_step_h" name="thin_step_h" value="1.4" step="0.1">

    <label>–®–∞–≥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π (–º–º):</label>
    <input type="number" id="thin_step_v" name="thin_step_v" value="1.4" step="0.1">
    <span style="font-size: 0.8em; font-style: italic;">
    –ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É —à–∞–≥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π —Ä–∞–≤–µ–Ω —à–∞–≥—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π –∏ —Ä–∞–≤–µ–Ω —Ç–æ–ª—â–∏–Ω–µ –ª–∏–Ω–∏–π —à—Ä–∏—Ñ—Ç–∞.
    </span><br><br>

    <b>–¶–≤–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</b><br>

    <span style="font-size: 0.9em;">–¶–≤–µ—Ç —Ä–∞–º–∫–∏:</span>
    <input type="text" id="frame_color" name="frame_color" value="#B3E5FC">

    <span style="font-size: 0.9em;">–¶–≤–µ—Ç —Å–µ—Ç–∫–∏:</span>
    <input type="text" id="grid_color" name="grid_color" value="#81D4FA">

    <span style="font-size: 0.9em;">–¶–≤–µ—Ç –±—É–∫–≤/—Ç–æ—á–µ–∫:</span>
    <input type="text" id="font_color" name="font_color" value="lightgray">

    <input type="checkbox" id="use_gray" name="use_gray">
    <span style="font-size: 0.9em;">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä—É—é –ø–∞–ª–∏—Ç—Ä—É</span><br><br>

    <input type="checkbox" name="show_grid" checked> –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É<br>
    <input type="checkbox" name="show_font" checked> –ü–æ–∫–∞–∑–∞—Ç—å –±—É–∫–≤—ã<br>
    <input type="checkbox" name="dots_only"> –¢–æ–ª—å–∫–æ —Ç–æ—á–∫–∏<br>
    <input type="checkbox" name="classic_grid"> –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞<br><br>

    <label>–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç:</label>
    <select name="font_file">
      {% for f in fonts %}
          {% if f.lower() == "gost_type_a_italic.ttf" %}
              <option value="{{f}}" selected>{{ labels.get(f.lower(), f) }}</option>
          {% else %}
              <option value="{{f}}">{{ labels.get(f.lower(), f) }}</option>
          {% endif %}
      {% endfor %}
    </select>

    <label>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:</label>
    <textarea name="text" rows="6" cols="60">–ü—Ä–æ–≥—Ä–∞–º–º–∞
–¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
–Ω–∞–≤—ã–∫–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è 
–Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–∑—É—á–∞—Ç—å —á–µ—Ä—á–µ–Ω–∏–µ,
–∞–≤—Ç–æ—Ä - Mike Yakutsenak.
Proprietary software 2025.</textarea>

    –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt):
    <input type="file" name="textfile">

    <input type="checkbox" name="training_real">
    –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è (—Å–∏–º–≤–æ–ª—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å–º. gif)

    <input type="submit" value="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å gif(V), PDF, PNG –∏ SVG">

    {% if generated %}
      <p style="margin-top: 20px;">
        <label for="output_dir">–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:</label>
        <input type="text" name="output_dir"
               placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, output_2025-10-07_14-33-11_admin"
               style="width: 100%; padding: 5px;" />

      <div style="line-height: 0.4em;">

      <p><a href="/download/pdf">üìÑ –°–∫–∞—á–∞—Ç—å PDF</a></p>
      <p><a href="/download/png">üñºÔ∏è –°–∫–∞—á–∞—Ç—å PNG</a></p>
      <p><a href="/download/svg">üß¨ –°–∫–∞—á–∞—Ç—å SVG</a></p>
    {% endif %}
  </form>

  <script>
    function updateLineWidth() {
        const fontSizeInput = document.getElementById("font_size");
        const lineWidthInput = document.getElementById("line_width");
        const autoCheckbox = document.getElementById("auto_line_width");
        const stepH = document.getElementById("thin_step_h");
        const stepV = document.getElementById("thin_step_v");
        const fontSize = parseFloat(fontSizeInput.value);

        if (autoCheckbox.checked && !isNaN(fontSize)) {
            const lw = (fontSize / 14).toFixed(1);
            lineWidthInput.value = lw;
            if (stepH) stepH.value = lw;
            if (stepV) stepV.value = lw;
            lineWidthInput.readOnly = true;
            lineWidthInput.style.background = "#f4f4f4";
        } else {
            lineWidthInput.readOnly = false;
            lineWidthInput.style.background = "white";
        }
    }

    document.getElementById("use_gray").addEventListener("change", function() {
        const grayMode = this.checked;
        document.getElementById("frame_color").value = grayMode ? "0.6" : "#B3E5FC";
        document.getElementById("grid_color").value = grayMode ? "0.4" : "#81D4FA";
        document.getElementById("font_color").value = grayMode ? "0.6" : "lightgray";
    });

    document.addEventListener("DOMContentLoaded", updateLineWidth);
    document.getElementById("font_size").addEventListener("input", updateLineWidth);
    document.getElementById("auto_line_width").addEventListener("change", updateLineWidth);
  </script>
</body>
</html>
"""

# ------------------------------------------------
#  –û–°–ù–û–í–ù–û–ô –ú–ê–†–®–†–£–¢
# ------------------------------------------------
@app.route("/", methods=["GET", "POST"])
def index():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É, —Å–æ–∑–¥–∞—ë—Ç PDF –∏ PNG.
    """
    global generated_pdf, generated_png, generated_svg
    generated = False

    if request.method == "POST":
        # --- 1. –¢–µ–∫—Å—Ç: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Ñ–∞–π–ª .txt ---
        lines = []
        if "textfile" in request.files:
            file = request.files["textfile"]
            if file and file.filename.lower().endswith(".txt"):
                try:
                    content = file.read().decode("utf-8")
                except UnicodeDecodeError:
                    content = file.read().decode("cp1251", errors="ignore")
                lines = [ln.strip() for ln in content.splitlines() if ln.strip()]
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ textarea       
        if not lines:
            text = request.form.get("text", "")
            lines = [ln.strip() for ln in text.splitlines() if ln.strip()]

        # --- 2. –ß—Ç–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
        def _f(name, default):
            try:
                return float(request.form.get(name, default))
            except (TypeError, ValueError):
                return default

        spacing   = _f("spacing", 4.2)
        font_size = _f("font_size", 10.0)
        thin_step_h = _f("thin_step_h", round(font_size / 14.0, 1))
        thin_step_v = _f("thin_step_v", round(font_size / 14.0, 1))

        # --- –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞) ---
        auto_line_width = "auto_line_width" in request.form
        if auto_line_width:
            line_width = round(font_size / 14.0, 1)
        else:
            line_width = _f("line_width", round(font_size / 14.0, 1))

        # --- 3. –¶–≤–µ—Ç–∞ –∏ —Ñ–ª–∞–≥–∏ ---
        frame_color = request.form.get("frame_color", "#B3E5FC")
        grid_color  = request.form.get("grid_color",  "#81D4FA")
        font_color  = request.form.get("font_color",  "lightgray")

        show_grid    = "show_grid" in request.form
        show_font    = "show_font" in request.form
        dots_only    = "dots_only" in request.form
        classic_grid = "classic_grid" in request.form

        # --- –í—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–∞ ---
        font_file = request.form.get("font_file", "gost_type_a_italic.ttf")
        if not font_file or font_file not in AVAILABLE_FONTS:
            font_file = "gost_type_a_italic.ttf"
        font_path = os.path.join(FONTS_DIR, font_file)
        
        # --- –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã) ‚Äî —Å–æ–∑–¥–∞—ë—Ç training_real.gif ---
        if "training_real" in request.form:
            try:
                from Font_on_TEMP5_to_GOST import render_training_letter_images
                output_dir = request.form.get("output_dir")
                if not output_dir or output_dir.strip() == "":
                    from datetime import datetime
                    import getpass
                    username = getpass.getuser()
                    date_str = datetime.now().strftime("%Y-%m-%d")
                    output_dir = f"output_{date_str}_{username}" # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è GIF –∞–Ω–∏–º–∞—Ü–∏–∏

                os.makedirs(output_dir, exist_ok=True)

                gif_path = os.path.join(output_dir, "training_images.gif")
                render_training_letter_images(lines, save_path=gif_path)

                print(f"‚úÖ training_images.gif —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {gif_path}")

                print("‚úÖ training_images.gif —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ø–æ PNG)")
                
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ training_real.gif:", e)


                # --- –†–µ–Ω–¥–µ—Ä ---
        renderer = TextRenderer(
            font_path=font_path,
            spacing=spacing,
            font_size=font_size,
            frame_color=frame_color,
            grid_color=grid_color,
            font_color=font_color,
            line_width=line_width
        )

        fig = renderer.render_to_figure(
            lines,
            show_grid=show_grid,
            show_font=show_font,
            dots_only=dots_only,
            classic_grid=classic_grid,
            thin_step_h=thin_step_h,
            thin_step_v=thin_step_v
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SVG
        svg_buffer = io.BytesIO()
        fig.savefig(svg_buffer, format="svg", bbox_inches="tight")
        svg_buffer.seek(0)
        generated_svg = svg_buffer


        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF –∏ PNG –≤ –ø–∞–º—è—Ç—å ---
        buf_pdf, buf_png = io.BytesIO(), io.BytesIO()
        fig.savefig(buf_pdf, format="pdf", bbox_inches="tight")
        fig.savefig(buf_png, format="png", dpi=300, bbox_inches="tight")
        buf_pdf.seek(0), buf_png.seek(0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É—Ñ–µ—Ä—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)
        global generated_pdf, generated_png
        generated_pdf, generated_png = buf_pdf, buf_png
        generated = True

    return render_template_string(HTML_FORM,
                                  generated=generated,
                                  fonts=AVAILABLE_FONTS,
                                  labels=FONT_LABELS)

# ------------------------------------------------
#  –°–ö–ê–ß–ò–í–ê–ù–ò–ï PDF / PNG
# ------------------------------------------------
@app.route("/download/pdf")
def download_pdf():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF. –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "I/O operation on closed file" –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.
    """
    global generated_pdf
    if generated_pdf:
        try:
            # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∑–∞–∫—Ä—ã—Ç)
            data = generated_pdf.getvalue()
        except ValueError:
            # –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ —É–∂–µ –∑–∞–∫—Ä—ã—Ç Flask'–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            data = b""
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π BytesIO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
        buffer_copy = io.BytesIO(data)
        buffer_copy.seek(0)
        return send_file(buffer_copy,
                         as_attachment=True,
                         download_name="gost_titul.pdf",
                         mimetype="application/pdf")
    return "PDF –Ω–µ —Å–æ–∑–¥–∞–Ω"


@app.route("/download/png")
def download_png():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PNG. –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "I/O operation on closed file" –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏.
    """
    global generated_png
    if generated_png:
        try:
            data = generated_png.getvalue()
        except ValueError:
            data = b""
        buffer_copy = io.BytesIO(data)
        buffer_copy.seek(0)
        return send_file(buffer_copy,
                         as_attachment=True,
                         download_name="gost_titul.png",
                         mimetype="image/png")
    return "PNG –Ω–µ —Å–æ–∑–¥–∞–Ω"

@app.route("/download/svg")
def download_svg():
    global generated_svg
    if not generated_svg:
        return "SVG –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", 404
    return send_file(generated_svg, mimetype="image/svg+xml", as_attachment=True, download_name="gost_output.svg")    


# ------------------------------------------------
#  –ó–ê–ü–£–°–ö
# ------------------------------------------------
if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ.
    –•–æ—Å—Ç 0.0.0.0 ‚Äî –¥–æ—Å—Ç—É–ø —Å –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏.
    """
    app.run(host="0.0.0.0", port=5000, debug=True)
